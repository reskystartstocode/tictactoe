def winning_line(row):
    return (len(set(row)) == 1) and list(set(row))[0] != ' '

def row_winner(board):
    temp = []
    for row in board:
        if winning_line(row):
            temp.append(True)
        else:
            temp.append(False)
    return True in temp

def col_winner(board):
    board2 = list(zip(*board))
    temp = []
    for row in board2:
        if winning_line(row):
            temp.append(True)
        else:
            temp.append(False)
    return True in temp

def diagonal_winner(board):
    diag1 = []
    diag2 = []
    for i in range(len(board)):
        diag1.append(board[i][i])
        diag2.append(board[i][-i-1])
    return winning_line(diag1) or (winning_line(diag2))

def winning_condition(board):
    return row_winner(board) or col_winner(board) or diagonal_winner(board)

def make_board(size):
    row = []
    board = []
    for i in range(size):
        row.append(' ')
    for i in range(size):
        board.append(row.copy())
    return board

def format_board(board):
    final = ' '
    temp = ''
    matrix = []
    separator = '+'.join('-' * len(board))
    for i in range(len(board)):
        final += str(i + 1)
    final = ' '.join(final)
    for i, row in enumerate(board):
        temp = str(i + 1) + ' ' + '|'.join(row)
        matrix.append(temp)
    matrix = f'\n  {separator}\n'.join(matrix)
    final = final + '\n' + matrix
    return final

def print_board(board):
    print(format_board(board))

def input_check(var,string):
    while True:
        try:
            var = int(input(string))
        except ValueError:
            print ("Invalid value.")
        else:
            break

def play_move(board,player):
    print(f"Player {player}'s turn")
    print_board(board)
    while True:
        row = int(input('Enter row: '))-1
        col = int(input('Enter column: '))-1
        if row > len(board) or col > len(board):
            print('Sorry, coordinate value too large.')
        elif board[row-1][col-1] != ' ':
            print("Sorry, can't play over occupied space.")
        else:
            break
    board[row][col] = player
    return board

def print_winner(board,player):
    if winning_condition(board):
        print(format_board(board))
        print(f"{player} is the winner!")

def play_game(size,player1,player2):
    board = make_board(size)
    turn = 1
    while turn <= size**2:
        print(f"Turn {turn}:")
        if turn % 2 == 1: player = player1
        else: player = player2
        play_move(board, player)
        if winning_condition(board):
            print_winner(board, player)
            break
        elif turn == size**2:
            print("It's a draw!")
        turn += 1

play_game(2,'O','X')
